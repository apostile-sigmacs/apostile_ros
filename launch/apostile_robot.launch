
<launch>
    <!-- we are assigning our custom_bot.urdf file to robot_description -->
    <param name="robot_description" textfile="$(find apostile_robot)/urdf/custom_bot.urdf"/>
    <!-- Reason behind include file: we are including our empty-world.launch into gazebo_ros -->
    <include file = "$(find gazebo_ros)/launch/empty_world.launch">
        <!-- after the include, we pass the world created by us as an arguement with a name called world_name -->
        <arg name="world_name" value="$(find apostile_robot)/worlds/empty.world"/>
        <!-- <arg name="world_name" value="$(find rrt_exploration_tutorials)/launch/includes/worlds/MTR.world"/> -->

        <!-- verbose indicates the warning messages  -->
        <arg name="verbose" value="true"/> 
        <!-- GUI helps to visulise the user interface  -->
        <arg name="gui" value="true"/>
        
           

    </include>  
         <!--we are spawing our robot in gazebo_ros and the type is spawn model  -->
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model"
           args="-param robot_description -urdf -model custom_bot.urdf" />     
           <!-- we call the robot_description where we stored the custom_bot.urdf -->
           <!-- robot_state_publisher and joint_state_publisher is very important in any project -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
        <param name="use_gui" value="false  "/>
    <!-- joint state publisher publishes the wheel data tp robot_state_publsiher  -->
        
        
    </node>

    <arg name="map_file" default="$(find apostile_robot)/maps/my_nav.yaml"/>
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)"/>
   


    
    
    
        
    
    <include file="$(find apostile_robot)/launch/amcl.launch"/>
    <!-- amcl is used to know robots position in the coordinate frame  -->
    
        
    




    
        <!-- Note:: The wheel joints data is collected by joint state and it will give the data to robot state .... This process will start to send odom values  -->
        
    <node pkg="move_base" type="move_base" name="move_base" output="screen">
        
        <param name="base_local_planner" value="dwa_local_planner/DWAPlannerROS" />
        <param name="base_global_planner" value="navfn/NavfnROS" />
        
        
        <param name="shutdown_costmaps" value="false"/>
        <param name="controller_frequency" value="10"/>
        <param name="planner_patience" value="5.0"/>
        <param name="controller_patience" value="15.0"/>
        <param name="conservative_reset_dist" value="3.0"/>
        <param name="planner_frequency" value="5.0"/>
        <param name="oscillation_timeout" value="10.0"/>
        <param name="oscillation_distance" value="0.2"/>
       
        <rosparam file="$(find apostile_robot)/config/costmap_common_params.yaml" command="load" ns="global_costmap"/>

        <rosparam file="$(find apostile_robot)/config/costmap_common_params.yaml" command="load" ns="local_costmap"/>
        <rosparam file="$(find apostile_robot)/config/local_costmap_params.yaml" command="load"/>
        <rosparam file="$(find apostile_robot)/config/global_costmap_params.yaml" command="load"/>
        <rosparam file="$(find apostile_robot)/config/base_local_planner.yaml" command="load"/>
        <rosparam file="$(find apostile_robot)/config/base_global_planner.yaml" command="load"/>

    </node>
        
</launch>